<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="d3viz/css/d3viz.css"/>
	<link rel="stylesheet" href="d3viz/css/d3-context-menu.css"/>
	<script type="text/javascript" src="d3viz/js/d3viz.js"></script>
	<script type="text/javascript" src="d3viz/js/d3.v3.min.js"></script>
	<script type="text/javascript" src="d3viz/js/dagre-d3.min.js"></script>
	<script type="text/javascript" src="d3viz/js/graphlib-dot.min.js"></script>
	<script type="text/javascript" src="d3viz/js/d3-context-menu.js"></script>
</head>
<body>
	<div id='menu' class='menuBar'>
	    <input name="resetNodes" 
	           type="button" 
	           value="Reset nodes"
	           onclick="resetNodes()"/>
	    <input name="releaseNodes" 
	           type="button" 
	           value="Release nodes"
	           onclick="releaseNodes()"/>
	</div>

	<script type="text/javascript">
		// Backend graph in DOT format
		var dotGraph = graphlibDot.read("digraph G {\n\tgraph [bb=\"0,0,264.49,384\"];\n\tnode [label=\"\\N\"];\n\tn1\t [apply_op=GpuFromHost,\n\t\tfillcolor=red,\n\t\theight=0.5,\n\t\tlabel=GpuFromHost,\n\t\tnode_type=apply,\n\t\tpos=\"202.74,279\",\n\t\tshape=ellipse,\n\t\tstyle=filled,\n\t\ttype=colored,\n\t\twidth=1.7151];\n\tn7\t [apply_op=GpuElemwise,\n\t\tfillcolor=\"#FFAABB\",\n\t\theight=0.5,\n\t\tlabel=GpuElemwise,\n\t\tnode_type=apply,\n\t\tpos=\"131.74,192\",\n\t\tshape=ellipse,\n\t\tstyle=filled,\n\t\ttype=colored,\n\t\twidth=1.6971];\n\tn1 -> n7\t [label=\"1 fmatrix\",\n\t\tlp=\"196.74,235.5\",\n\t\tpos=\"e,146.09,209.58 188.38,261.39 178.08,248.78 164.05,231.59 152.54,217.48\"];\n\tn2\t [dtype=fmatrix,\n\t\tfillcolor=limegreen,\n\t\theight=0.5,\n\t\tlabel=y,\n\t\tnode_type=input,\n\t\tpos=\"202.74,366\",\n\t\tshape=box,\n\t\tstyle=filled,\n\t\twidth=0.75];\n\tn2 -> n1\t [label=fmatrix,\n\t\tlp=\"223.24,322.5\",\n\t\tpos=\"e,202.74,297 202.74,347.97 202.74,336.19 202.74,320.56 202.74,307.16\"];\n\tn4\t [apply_op=GpuFromHost,\n\t\tfillcolor=red,\n\t\theight=0.5,\n\t\tlabel=GpuFromHost,\n\t\tnode_type=apply,\n\t\tpos=\"61.745,279\",\n\t\tshape=ellipse,\n\t\tstyle=filled,\n\t\ttype=colored,\n\t\twidth=1.7151];\n\tn4 -> n7\t [color=red,\n\t\tlabel=\"0 fmatrix\",\n\t\tlp=\"127.74,235.5\",\n\t\tpos=\"e,117.6,209.58 75.91,261.39 86.062,248.78 99.892,231.59 111.25,217.48\"];\n\tn5\t [dtype=fmatrix,\n\t\tfillcolor=limegreen,\n\t\theight=0.5,\n\t\tlabel=x,\n\t\tnode_type=input,\n\t\tpos=\"61.745,366\",\n\t\tshape=box,\n\t\tstyle=filled,\n\t\twidth=0.75];\n\tn5 -> n4\t [label=fmatrix,\n\t\tlp=\"82.245,322.5\",\n\t\tpos=\"e,61.745,297 61.745,347.97 61.745,336.19 61.745,320.56 61.745,307.16\"];\n\tn9\t [apply_op=HostFromGpu,\n\t\tfillcolor=red,\n\t\theight=0.5,\n\t\tlabel=HostFromGpu,\n\t\tnode_type=apply,\n\t\tpos=\"131.74,105\",\n\t\tshape=ellipse,\n\t\tstyle=filled,\n\t\ttype=colored,\n\t\twidth=1.7151];\n\tn7 -> n9\t [label=fmatrix,\n\t\tlp=\"152.24,148.5\",\n\t\tpos=\"e,131.74,123 131.74,173.97 131.74,162.19 131.74,146.56 131.74,133.16\"];\n\tn10\t [dtype=fmatrix,\n\t\tfillcolor=dodgerblue,\n\t\theight=0.5,\n\t\tlabel=fmatrix,\n\t\tnode_type=output,\n\t\tpos=\"131.74,18\",\n\t\tshape=box,\n\t\tstyle=filled,\n\t\twidth=0.79167];\n\tn9 -> n10\t [label=fmatrix,\n\t\tlp=\"152.24,61.5\",\n\t\tpos=\"e,131.74,36.003 131.74,86.974 131.74,75.192 131.74,59.561 131.74,46.158\"];\n}\n");
		// Frontend graph for visualization
		var graph = {};
		
		var forceLayout;
		var isProfiled = false; // true if profiling information available
		var useProfileColors = false;
		var fixOnInit = true; // fix nodes on initialization
		var maxProfilePer = 0;
		var profileColors = ["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#a50f15"];
		var pad = 10;
		var isEditNode = false; // true if node is edited
		var menuItems = [
			{
				title: 'Edit',
				action: function(elm, d, i) { editNode(elm, d); }
			},
			{
				title: 'Release',
				action: function(elm, d, i) { releaseNode(d); }
			}
		];

		// Create main panel
		d3.select('body').select('svg').remove();
		var svg = d3.select('body').append('svg')
			.attr('width', '100%')
			.attr('height', '95%');
		var pane = svg.append('g');
		
		// Zoom behaviour
		var zoom = d3.behavior.zoom()
			.scaleExtent([0.2, 8])
			.on('zoom', function(d) {
				var trans = d3.event.translate;
				trans[0] += 300;
				trans[1] += 100;
				pane.attr('transform', 'translate(' + trans + ') scale(' + d3.event.scale + ')');
			});
		svg.call(zoom);
		zoom.event(svg);
		svg.on("dblclick.zoom", null);
		
		// Edges
		var edgeDiv = d3.select('body').append('div')
			.attr('class', 'edgeTooltip')
			.style('opacity', 0.0);
		
		// Div for node details	
		var nodeInfo = d3.select('body').append('div')
			.attr('class', 'nodeInfo')
			.style('opacity', 0.0);
		
		// Definition head of edges
		var markerData = [
			{'id': 'n', 'color': 'black'},
			{'id': 'r', 'color': 'red'},
			{'id': 'b', 'color': 'dodgerblue'}];
		svg.append("defs").selectAll('marker').data(markerData).enter().append("marker")
		    .attr("id", function(d) { return 'edgeArrow_' + d.id;})
		    .attr("markerWidth", 4)
		    .attr("markerHeight", 4)
		    .attr("refX", 2)
		    .attr("refY", 2)
		    .attr("orient", "auto")
		  	.append("path")
		    .attr("d", "M0,0 L4,2 L0,4 Z")
		    .attr('fill', function(d) { return d.color;});
	
		// Initialize graph
		processDotGraph(dotGraph);		
		graph = frontEndGraph(dotGraph);
		drawGraph();
	</script>
</body>
</html>
